name: Dev Release

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pages: write
  id-token: write

jobs:
  # First, build all the packages with dev version
  build-dev-packages:
    name: Build Dev Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        debian_version:
          - {codename: bullseye, version: 11}
          - {codename: bookworm, version: 12}
          - {codename: trixie, version: 13}
        arch:
          - {rust: x86_64-unknown-linux-gnu, deb: amd64}
          - {rust: aarch64-unknown-linux-gnu, deb: arm64}
          - {rust: armv7-unknown-linux-gnueabihf, deb: armhf}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.arch.rust }}
      
      - name: Install cross-compilation tools
        if: matrix.arch.rust != 'x86_64-unknown-linux-gnu'
        run: |
          # Wait for apt locks to be released
          while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
            echo "Waiting for other apt processes to finish..."
            sleep 5
          done
          
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            gcc-arm-linux-gnueabihf \
            libc6-dev-arm64-cross \
            libc6-dev-armhf-cross
      
      - name: Install packaging dependencies
        run: |
          # Wait for apt locks to be released
          while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
            echo "Waiting for other apt processes to finish..."
            sleep 5
          done
          
          sudo apt-get update
          sudo apt-get install -y \
            debhelper \
            devscripts \
            dpkg-dev \
            lintian \
            fakeroot \
            build-essential
      
      - name: Prepare dev version
        id: version
        run: |
          # Create a dev version based on commit
          BASE_VERSION=$(grep '^version' Cargo.toml | cut -d'"' -f2)
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          DEV_VERSION="${BASE_VERSION}+dev.${TIMESTAMP}.${COMMIT_SHORT}"
          
          echo "VERSION=$DEV_VERSION" >> $GITHUB_OUTPUT
          echo "DEB_VERSION=${DEV_VERSION}-1~${{ matrix.debian_version.codename }}" >> $GITHUB_OUTPUT
      
      - name: Update changelog
        run: |
          cat > debian/changelog << EOF
          aprstx (${{ steps.version.outputs.DEB_VERSION }}) ${{ matrix.debian_version.codename }}; urgency=medium
          
            * Development build from commit ${GITHUB_SHA}
            * Branch: ${GITHUB_REF_NAME}
            * Built for Debian ${{ matrix.debian_version.version }} (${{ matrix.debian_version.codename }})
          
           -- GitHub Actions <actions@github.com>  $(date -R)
          EOF
      
      - name: Build package
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CC_armv7_unknown_linux_gnueabihf: arm-linux-gnueabihf-gcc
          AR_aarch64_unknown_linux_gnu: aarch64-linux-gnu-ar
          AR_armv7_unknown_linux_gnueabihf: arm-linux-gnueabihf-ar
        run: |
          export DEB_BUILD_OPTIONS="nocheck"
          export CARGO_TARGET_DIR=target
          export DEB_HOST_ARCH=${{ matrix.arch.deb }}
          
          # Set up cargo for cross-compilation
          mkdir -p ~/.cargo
          cat > ~/.cargo/config.toml << EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          EOF
          
          # Build binary package with -d flag to skip dependency checks
          if [ "${{ matrix.arch.deb }}" == "amd64" ]; then
            dpkg-buildpackage -us -uc -b -d
          else
            dpkg-buildpackage -us -uc -b -d --host-arch=${{ matrix.arch.deb }}
          fi
      
      - name: Rename package
        run: |
          # Find the .deb file
          DEB_FILE=$(find .. -name "*.deb" -type f | head -n1)
          
          if [ -z "$DEB_FILE" ]; then
            echo "ERROR: No .deb file found to rename!"
            exit 1
          fi
          
          # Copy to current directory with new name
          NEW_NAME="aprstx-dev_${{ steps.version.outputs.VERSION }}_${{ matrix.debian_version.codename }}_${{ matrix.arch.deb }}.deb"
          cp "$DEB_FILE" "$NEW_NAME"
          
          echo "DEB_PACKAGE=$NEW_NAME" >> $GITHUB_ENV
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: aprstx-dev-${{ matrix.debian_version.codename }}-${{ matrix.arch.deb }}
          path: ${{ env.DEB_PACKAGE }}
  
  # Create and upload dev repository as artifact
  create-dev-repository:
    name: Create Dev APT Repository
    needs: build-dev-packages
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup GPG for package signing
        id: gpg
        run: |
          # Wait for apt locks to be released
          while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
            echo "Waiting for other apt processes to finish..."
            sleep 5
          done
          
          sudo apt-get update
          sudo apt-get install -y gnupg reprepro
          
          # Generate GPG key
          export GNUPGHOME=$(mktemp -d)
          cat > gpg-batch << EOF
          %echo Generating GPG key for Dev APT repository
          Key-Type: RSA
          Key-Length: 4096
          Name-Real: APRS Daemon Dev Repository
          Name-Email: aprstx-dev@github.io
          Expire-Date: 1y
          %no-protection
          %commit
          %echo done
          EOF
          
          gpg --batch --generate-key gpg-batch
          gpg --armor --export aprstx-dev@github.io > dev-repository-key.asc
          echo "GPG_HOME=$GNUPGHOME" >> $GITHUB_OUTPUT
      
      - name: Download packages
        uses: actions/download-artifact@v5
        with:
          path: packages
          pattern: aprstx-dev-*
      
      - name: Create Dev APT repository
        env:
          GNUPGHOME: ${{ steps.gpg.outputs.GPG_HOME }}
        run: |
          # Create repository directories
          mkdir -p apt-dev/{conf,db,dists,pool}
          
          # Create distributions configuration for dev
          cat > apt-dev/conf/distributions << 'EOF'
          Origin: APRS Daemon Dev
          Label: APRS Daemon Development Repository
          Suite: dev
          Codename: dev
          Architectures: amd64 arm64 armhf
          Components: main
          Description: Development builds of APRS Daemon (aprstx)
          SignWith: aprstx-dev@github.io
          EOF
          
          # Copy public key
          cp dev-repository-key.asc apt-dev/dev-repository-key.asc
          
          # Add all packages to dev repository
          cd apt-dev
          find ../packages -name "*.deb" -type f | while read deb; do
            echo "Adding $deb to dev repository..."
            reprepro includedeb dev "$deb" || echo "Failed to add $deb"
          done
          
          # Generate repository metadata
          reprepro export
      
      - name: Create dev index.html
        run: |
          # Create the HTML file with proper escaping
          cat > apt-dev/index.html << 'ENDHTML'
          <!DOCTYPE html>
          <html>
          <head>
              <title>APRS Daemon Dev Repository</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
                      line-height: 1.6;
                      color: #333;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 20px;
                  }
                  .warning {
                      background: #fff3cd;
                      border: 1px solid #ffeeba;
                      color: #856404;
                      padding: 15px;
                      border-radius: 5px;
                      margin: 20px 0;
                  }
                  code {
                      background: #f4f4f4;
                      padding: 2px 5px;
                      border-radius: 3px;
                  }
                  pre {
                      background: #f4f4f4;
                      padding: 10px;
                      border-radius: 5px;
                      overflow-x: auto;
                  }
              </style>
          </head>
          <body>
              <h1>APRS Daemon Development Repository</h1>
              
              <div class="warning">
                  <strong>⚠️ Warning:</strong> This repository contains development builds that are automatically 
                  generated from the main branch. These packages may be unstable and are not recommended for 
                  production use. For stable releases, use the 
                  <a href="/aprstx/">main repository</a>.
              </div>
              
              <h2>Quick Installation</h2>
              
              <pre>curl -fsSL https://gmcintire.github.io/aprstx/dev/install-dev.sh | sudo bash</pre>
              
              <h2>Manual Installation</h2>
              
              <pre>
          # Add repository key
          curl -fsSL https://gmcintire.github.io/aprstx/dev/dev-repository-key.asc | sudo apt-key add -
          
          # Add dev repository
          echo "deb https://gmcintire.github.io/aprstx/dev dev main" | sudo tee /etc/apt/sources.list.d/aprstx-dev.list
          
          # Update and install dev version
          sudo apt update
          sudo apt install aprstx
              </pre>
              
              <h2>Latest Build Info</h2>
              <p>
                  Commit: <code>${GITHUB_SHA}</code><br>
                  Branch: <code>${GITHUB_REF_NAME}</code><br>
                  Build Date: <code>$(date -u)</code>
              </p>
              
              <h2>Repository Contents</h2>
              <ul>
                  <li><a href="dev-repository-key.asc">GPG Public Key</a></li>
                  <li><a href="dists/">Package Distributions</a> (browse all available packages)</li>
                  <li><a href="pool/">Package Pool</a> (browse .deb files)</li>
              </ul>
              
              <h2>Browse Repository</h2>
              <p>You can browse the repository structure to download individual .deb packages:</p>
              <ul>
                  <li><a href="pool/main/">Browse all .deb packages</a></li>
              </ul>
              
              <p><a href="/aprstx/">← Back to stable repository</a></p>
          </body>
          </html>
          ENDHTML
      
      - name: Create directory listings
        run: |
          # Function to create index.html for a directory
          create_index() {
            local dir="$1"
            local title="$(basename "$dir")"
            
            cat > "$dir/index.html" << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Index of /aprstx/dev/'"$title"'</title>
              <style>
                  body {
                      font-family: monospace;
                      margin: 20px;
                  }
                  h1 {
                      font-size: 1.5em;
                  }
                  table {
                      border-collapse: collapse;
                      width: 100%;
                  }
                  th, td {
                      text-align: left;
                      padding: 8px;
                      border-bottom: 1px solid #ddd;
                  }
                  th {
                      background-color: #f2f2f2;
                  }
                  a {
                      text-decoration: none;
                      color: #0066cc;
                  }
                  a:hover {
                      text-decoration: underline;
                  }
                  .size {
                      text-align: right;
                  }
                  .date {
                      text-align: right;
                  }
              </style>
          </head>
          <body>
              <h1>Index of /aprstx/dev/'"$title"'</h1>
              <table>
                  <tr>
                      <th>Name</th>
                      <th>Last Modified</th>
                      <th>Size</th>
                  </tr>
                  <tr>
                      <td colspan="3"><a href="../">Parent Directory</a></td>
                  </tr>
          EOF
            
            # Add entries for files and directories
            for item in "$dir"/*; do
              if [ -e "$item" ] && [ "$(basename "$item")" != "index.html" ]; then
                name=$(basename "$item")
                date=$(date -r "$item" "+%Y-%m-%d %H:%M")
                
                if [ -d "$item" ]; then
                  echo "                  <tr><td><a href=\"$name/\">$name/</a></td><td class=\"date\">$date</td><td class=\"size\">-</td></tr>" >> "$dir/index.html"
                else
                  size=$(ls -lh "$item" | awk '{print $5}')
                  echo "                  <tr><td><a href=\"$name\">$name</a></td><td class=\"date\">$date</td><td class=\"size\">$size</td></tr>" >> "$dir/index.html"
                fi
              fi
            done
            
            echo "              </table>" >> "$dir/index.html"
            echo "          </body>" >> "$dir/index.html"
            echo "          </html>" >> "$dir/index.html"
          }
          
          # Create index files for key directories
          for dir in apt-dev/dists apt-dev/pool; do
            if [ -d "$dir" ]; then
              create_index "$dir"
              
              # Create index for subdirectories
              find "$dir" -type d | while read subdir; do
                create_index "$subdir"
              done
            fi
          done
      
      - name: Create dev install script
        run: |
          cat > apt-dev/install-dev.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "APRS Daemon Dev Repository Installer"
          echo "===================================="
          echo
          echo "⚠️  WARNING: This will install DEVELOPMENT builds"
          echo "These may be unstable. For stable releases, use:"
          echo "curl -fsSL https://gmcintire.github.io/aprstx/install.sh | sudo bash"
          echo
          read -p "Continue with dev installation? (y/N) " -n 1 -r
          echo
          if [[ ! $REPLY =~ ^[Yy]$ ]]; then
              exit 1
          fi
          
          # Check if running as root
          if [ "$EUID" -ne 0 ]; then 
              echo "Please run with sudo: sudo bash install-dev.sh"
              exit 1
          fi
          
          # Detect distribution
          if [ -f /etc/os-release ]; then
              . /etc/os-release
              DISTRO=$VERSION_CODENAME
          else
              echo "Cannot detect distribution"
              exit 1
          fi
          
          # Check if supported
          case "$DISTRO" in
              bullseye|bookworm|trixie)
                  echo "Detected: $PRETTY_NAME"
                  ;;
              *)
                  echo "Unsupported distribution: $DISTRO"
                  echo "Supported: Debian 11 (bullseye), 12 (bookworm), 13 (trixie)"
                  exit 1
                  ;;
          esac
          
          # Remove stable repository if it exists
          if [ -f /etc/apt/sources.list.d/aprstx.list ]; then
              echo "Removing stable repository..."
              rm -f /etc/apt/sources.list.d/aprstx.list
          fi
          
          # Add dev repository key
          echo "Adding dev repository key..."
          curl -fsSL https://gmcintire.github.io/aprstx/dev/dev-repository-key.asc | apt-key add -
          
          # Add dev repository
          echo "Adding dev repository..."
          echo "deb https://gmcintire.github.io/aprstx/dev dev main" > /etc/apt/sources.list.d/aprstx-dev.list
          
          # Update package list
          echo "Updating package list..."
          apt update
          
          # Install aprstx
          echo "Installing aprstx (dev version)..."
          apt install -y aprstx
          
          echo
          echo "Dev installation complete!"
          echo
          echo "Next steps:"
          echo "1. Edit configuration: sudo nano /etc/aprstx/aprstx.conf"
          echo "2. Start the service: sudo systemctl start aprstx"
          echo "3. Enable at boot: sudo systemctl enable aprstx"
          echo "4. Check status: sudo systemctl status aprstx"
          echo
          echo "To switch back to stable releases:"
          echo "1. Remove dev repository: sudo rm /etc/apt/sources.list.d/aprstx-dev.list"
          echo "2. Run stable installer: curl -fsSL https://gmcintire.github.io/aprstx/install.sh | sudo bash"
          EOF
          
          chmod +x apt-dev/install-dev.sh
      
      - name: Create archive of dev repository
        run: |
          tar czf dev-repository.tar.gz -C apt-dev .
      
      - name: Upload dev repository artifact
        uses: actions/upload-artifact@v4
        with:
          name: dev-repository
          path: dev-repository.tar.gz
          retention-days: 7