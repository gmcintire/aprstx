name: Update GitHub Pages

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Dev Release", "APT Repository"]
    types:
      - completed
  schedule:
    # Run daily to ensure Pages stays up to date
    - cron: '0 0 * * *'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  update-pages:
    name: Update GitHub Pages
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download current GitHub Pages
        continue-on-error: true
        run: |
          # Try to download current pages content
          mkdir -p current-pages
          cd current-pages
          wget -r -np -nH --cut-dirs=1 -R "index.html*" https://gmcintire.github.io/aprstx/ || true
          cd ..
      
      - name: Download stable repository artifact
        continue-on-error: true
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Try to download the latest apt-repository artifact
          echo "Looking for apt-repository artifact..."
          ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/artifacts --jq '.artifacts[] | select(.name == "apt-repository") | .id' | head -1)
          if [ -n "$ARTIFACT_ID" ]; then
            echo "Found artifact ID: $ARTIFACT_ID"
            mkdir -p stable-artifacts
            gh api repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip --output stable-artifacts/artifact.zip
            cd stable-artifacts && unzip -q artifact.zip && rm artifact.zip && cd ..
          else
            echo "No apt-repository artifact found"
          fi
      
      - name: Download dev repository artifact
        continue-on-error: true
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Try to download the latest dev-repository artifact
          echo "Looking for dev-repository artifact..."
          ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/artifacts --jq '.artifacts[] | select(.name == "dev-repository") | .id' | head -1)
          if [ -n "$ARTIFACT_ID" ]; then
            echo "Found artifact ID: $ARTIFACT_ID"
            mkdir -p dev-artifacts
            gh api repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip --output dev-artifacts/artifact.zip
            cd dev-artifacts && unzip -q artifact.zip && rm artifact.zip && cd ..
          else
            echo "No dev-repository artifact found"
          fi
      
      - name: Merge repositories
        run: |
          # Create the final pages structure
          mkdir -p pages-deploy
          
          # Copy existing pages content if available
          if [ -d current-pages ]; then
            cp -r current-pages/* pages-deploy/ || true
          fi
          
          # Extract and merge stable repository if available
          if [ -f stable-artifacts/apt-repository.tar.gz ]; then
            echo "Extracting stable repository..."
            mkdir -p temp-stable
            tar xzf stable-artifacts/apt-repository.tar.gz -C temp-stable
            cp -r temp-stable/* pages-deploy/
            rm -rf temp-stable
          fi
          
          # Extract and merge dev repository if available
          if [ -f dev-artifacts/dev-repository.tar.gz ]; then
            echo "Extracting dev repository..."
            mkdir -p temp-dev
            tar xzf dev-artifacts/dev-repository.tar.gz -C temp-dev
            mkdir -p pages-deploy/dev
            cp -r temp-dev/* pages-deploy/dev/
            rm -rf temp-dev
          fi
          
          # Create or update the main index.html
          cat > pages-deploy/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>APRS Daemon (aprstx) APT Repository</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
                      line-height: 1.6;
                      color: #333;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 20px;
                  }
                  code {
                      background: #f4f4f4;
                      padding: 2px 5px;
                      border-radius: 3px;
                  }
                  pre {
                      background: #f4f4f4;
                      padding: 10px;
                      border-radius: 5px;
                      overflow-x: auto;
                  }
                  .install-box {
                      background: #e7f3ff;
                      border: 1px solid #2188ff;
                      border-radius: 5px;
                      padding: 15px;
                      margin: 20px 0;
                  }
                  .dev-box {
                      background: #fff3cd;
                      border: 1px solid #ffeeba;
                      border-radius: 5px;
                      padding: 15px;
                      margin: 20px 0;
                  }
              </style>
          </head>
          <body>
              <h1>APRS Daemon (aprstx) APT Repository</h1>
              
              <p>This is the official APT repository for <strong>aprstx</strong>, a high-performance APRS daemon written in Rust.</p>
              
              <h2>Quick Installation (Stable)</h2>
              
              <div class="install-box">
                  <p>Run this command to add the repository and install aprstx:</p>
                  <pre>curl -fsSL https://gmcintire.github.io/aprstx/install.sh | sudo bash</pre>
              </div>
              
              <h2>Development Builds</h2>
              
              <div class="dev-box">
                  <p><strong>⚠️ Warning:</strong> Development builds may be unstable!</p>
                  <p>To install the latest development build:</p>
                  <pre>curl -fsSL https://gmcintire.github.io/aprstx/dev/install-dev.sh | sudo bash</pre>
                  <p><a href="/aprstx/dev/">Browse dev repository →</a></p>
              </div>
              
              <h2>Repository Contents</h2>
              <ul>
                  <li><a href="repository-key.asc">GPG Public Key</a></li>
                  <li><a href="dists/">Package Distributions</a></li>
                  <li><a href="pool/">Package Pool</a></li>
                  <li><a href="install.sh">Installation Script</a></li>
              </ul>
              
              <h2>More Information</h2>
              <p>For more information about aprstx, visit the <a href="https://github.com/gmcintire/aprstx">GitHub repository</a>.</p>
          </body>
          </html>
          EOF
      
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages-deploy
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4